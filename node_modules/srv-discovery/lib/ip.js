const net = require('net');

const isValidPort = v => (!isNaN(v) && v > 0 && v < 65536);

function parseIp4(str) {
	const match = str.match(/^([12]?[0-9]?[0-9](\.[12]?[0-9]?[0-9]){3})(:(\d+))?$/);
	if (!match) {
		return;
	}

	let ip = match[1];
	let port;

	if (match[4]) {
		port = parseInt(match[4], 10);
		if (!isValidPort(port)) {
			return;
		}
	}

	return { family: '4', ip, port };
}

function parseIp6(str) {
	let match;
	let ip;
	let port;

	if (str[0] === '[') {
		if (match = str.match(/^\[([a-f0-9:]+)\](:(\d+))?$/)) {
			ip = match[1];
			port = match[3];
		}
	} else {
		if (match = str.match(/^([a-f0-9:]+)(([#p.]|\s+port\s+)(\d+))?$/)) {
			ip = match[1];
			port = match[4];
		}
	}

	if (!ip || !net.isIPv6(ip)) {
		return;
	}

	if (port) {
		port = parseInt(port, 10);
		if (!isValidPort(port)) {
			return;
		}
	}

	return { family: '6', ip, port };
}

function parseIp(str) {
	if (str[0] === '[') {
		return parseIp6(str);
	}
	return parseIp4(str) || parseIp6(str);
}

module.exports = { parseIp };
